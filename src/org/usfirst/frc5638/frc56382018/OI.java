// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc5638.frc56382018;



import org.usfirst.frc5638.frc56382018.commands.*;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.buttons.JoystickButton;

import org.usfirst.frc5638.frc56382018.subsystems.*;


/**
 * This class is the glue that binds the controls on the physical operator
 * interface to the commands and command groups that allow control of the robot.
 */
public class OI {
    //// CREATING BUTTONS
    // One type of button is a joystick button which is any button on a joystick.
    // You create one by telling it which joystick it's on and which button
    // number it is.
    // Joystick stick = new Joystick(port);
    // Button button = new JoystickButton(stick, buttonNumber);

    // There are a few additional built in buttons you can use. Additionally,
    // by subclassing Button you can create custom triggers and bind those to
    // commands the same as any other Button.

    //// TRIGGERING COMMANDS WITH BUTTONS
    // Once you have a button, it's trivial to bind it to a button in one of
    // three ways:

    // Start the command when the button is pressed and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenPressed(new ExampleCommand());

    // Run the command while the button is being held down and interrupt it once
    // the button is released.
    // button.whileHeld(new ExampleCommand());

    // Start the command when the button is released  and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenReleased(new ExampleCommand());


    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public Joystick xbox1;
    public Joystick xbox2;
    public JoystickButton shiftUp;
    public JoystickButton shiftDown;
    public JoystickButton eleUP;
    public JoystickButton eleDO;
    public JoystickButton Dumpdown;
    public JoystickButton Dumpup;
    public JoystickButton Carmup;
    public JoystickButton Carmdown;
    public JoystickButton Winchout;
    public JoystickButton Winchin;
    public JoystickButton intakein;
    public JoystickButton intakeout;
    public JoystickButton intakeopen;
    public JoystickButton intakeclose;
    
    
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public OI() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

        xbox2 = new Joystick(1);
        xbox1 = new Joystick(0);
      //ELEVATOR
      		eleUP = new JoystickButton(xbox2, 3);
      		eleUP.whileHeld(new elevatorUpCom());
      		eleDO = new JoystickButton(xbox2, 1);
      		eleDO.whileHeld(new elevatorDownCom());
      		//ELEVATOR
      		
      		//DUMPER
      		Dumpdown = new JoystickButton(xbox2, 2);
      		Dumpdown.whileHeld(new dumpInCom());
      		Dumpup = new JoystickButton(xbox2, 4);
      		Dumpup.whileHeld(new dumpOutCom());
      		//DUMPER
      		
      		//CLIMB
      		Carmup = new JoystickButton(xbox2, 5);
      		Carmup.whileHeld(new armUp());
      		Carmdown = new JoystickButton(xbox2, 6);
      		Carmdown.whileHeld(new armDown());
      		Winchout = new JoystickButton(xbox2, 10);
      		Winchout.whileHeld(new climbCom());
      		//Winchin = new JoystickButton(xbox2, 8);
      		//Winchin.whileHeld(new climbCom());
      		//CLIMB
      		
      		//intake
      		intakein = new JoystickButton(xbox1, 5);
      		intakein.whileHeld(new intakeInCom());
      		intakeout = new JoystickButton(xbox1, 6);
      		intakeout.whileHeld(new intakeOutCom());
      		intakeopen = new JoystickButton(xbox1, 1);
      		intakeopen.toggleWhenPressed(new intakeOpen());
      		intakeclose = new JoystickButton(xbox1, 1);
      		intakeclose.toggleWhenPressed(new intakeClose());
      		//intake
        
        
        
        shiftUp = new JoystickButton(xbox1, 2);
		shiftUp.toggleWhenPressed(new shiftUp());
		shiftDown = new JoystickButton(xbox1, 2);
		shiftUp.toggleWhenPressed(new shiftDown());
        


        // SmartDashboard Buttons
        SmartDashboard.putData("Autonomous Command", new AutonomousCommand());
        SmartDashboard.putData("driveCom", new driveCom());
        SmartDashboard.putData("elevatorDownCom", new elevatorDownCom());
        SmartDashboard.putData("intakeInCom", new intakeInCom());
        SmartDashboard.putData("dumpOutCom", new dumpOutCom());
        SmartDashboard.putData("elevatorUpCom", new elevatorUpCom());
        SmartDashboard.putData("intakeOutCom", new intakeOutCom());
        SmartDashboard.putData("dumpInCom", new dumpInCom());
        SmartDashboard.putData("armUp", new armUp());
        SmartDashboard.putData("armDown", new armDown());
        SmartDashboard.putData("climbCom", new climbCom());
        SmartDashboard.putData("shiftUp", new shiftUp());
        SmartDashboard.putData("shiftDown", new shiftDown());
        SmartDashboard.putData("intakeOpen", new intakeOpen());
        SmartDashboard.putData("intakeClose", new intakeClose());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
    public Joystick getxbox1() {
        return xbox1;
    }

    public Joystick getxbox2() {
        return xbox2;
    }


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
}

